ðŸ’ˆ Introduction aux rÃ©seaux de neurones artificiels
#+PROPERTY: header-args:jupyter-python :session *Py* :results raw drawer :cache no :async yes :exports results :eval yes

#+SUBTITLE: Entrainement du modÃ¨le
#+AUTHOR: Laurent Siksous
#+EMAIL: siksous@gmail.com
# #+DATE:
#+DESCRIPTION: 
#+KEYWORDS: 
#+LANGUAGE:  fr

# specifying the beamer startup gives access to a number of
# keybindings which make configuring individual slides and components
# of slides easier.  See, for instance, C-c C-b on a frame headline.
#+STARTUP: beamer

#+STARTUP: oddeven

# we tell the exporter to use a specific LaTeX document class, as
# defined in org-latex-classes.  By default, this does not include a
# beamer entry so this needs to be defined in your configuration (see
# the tutorial).
#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [bigger] 

#+LATEX_HEADER: \usepackage{listings}

#+LATEX_HEADER: \definecolor{UBCblue}{rgb}{0.04706, 0.13725, 0.26667} % UBC Blue (primary)
#+LATEX_HEADER: \usecolortheme[named=UBCblue]{structure}

# Beamer supports alternate themes.  Choose your favourite here
#+BEAMER_COLOR_THEME: dolphin
#+BEAMER_FONT_THEME:  default
#+BEAMER_INNER_THEME: [shadow]rounded
#+BEAMER_OUTER_THEME: infolines

# the beamer exporter expects to be told which level of headlines
# defines the frames.  We use the first level headlines for sections
# and the second (hence H:2) for frames.
#+OPTIONS: ^:nil H:2 toc:nil

# the following allow us to selectively choose headlines to export or not
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport

# for a column view of options and configurations for the individual
# frames
#+COLUMNS: %20ITEM %13BEAMER_env(Env) %6BEAMER_envargs(Args) %4BEAMER_col(Col) %7BEAMER_extra(Extra)

# #+BEAMER_HEADER: \usebackgroundtemplate{\includegraphics[width=\paperwidth,height=\paperheight,opacity=.01]{img/bg2.jpeg}}
# #+BEAMER_HEADER: \logo{\includegraphics[height=.5cm,keepaspectratio]{img/bti_logo2.png}\vspace{240pt}}
# #+BEAMER_HEADER: \setbeamertemplate{background canvas}{\begin{tikzpicture}\node[opacity=.1]{\includegraphics [width=\paperwidth,height=\paperheight]{img/background.jpg}};\end{tikzpicture}}
# #+BEAMER_HEADER: \logo{\includegraphics[width=\paperwidth,height=\paperheight,keepaspectratio]{img/background.jpg}}
#+BEAMER_HEADER: \titlegraphic{\includegraphics[width=50]{img/logo.png}}
# #+BEAMER_HEADER: \definecolor{ft}{RGB}{255, 241, 229}
#+BEAMER_HEADER: \setbeamercolor{background canvas}{bg=ft}

* Preamble
** Emacs Setup                                                    :noexport:

#+begin_src emacs-lisp
(setq org-src-fontify-natively t)

(setq lsp-semantic-tokens-enable t)
(setq lsp-enable-symbol-highlighting t)

(setq lsp-enable-file-watchers nil
      read-process-output-max (* 1024 1024)
      gc-cons-threshold 100000000
      lsp-idle-delay 0.5
      ;;
      lsp-eldoc-hook nil
      lsp-eldoc-enable-hover nil

      ;;pas de fil d'ariane
      lsp-headerline-breadcrumb-enable nil
      ;; pas de imenu voir menu-list
      lsp-enable-imenu nil
      ;; lentille
      lsp-lens-enable t
 
      lsp-semantic-highlighting t
      lsp-modeline-code-actions-enable t
      )
  
(setq lsp-completion-provider :company
      lsp-completion-show-detail t
      lsp-completion-show-kind t)

(setq lsp-ui-doc-enable t
      lsp-ui-doc-show-with-mouse nil
      lsp-ui-doc-show-with-cursor t
      lsp-ui-doc-use-childframe t
      
      lsp-ui-sideline-diagnostic-max-line-length 80

      ;; lsp-ui-imenu
      lsp-ui-imenu-enable nil
      ;; lsp-ui-peek
      lsp-ui-peek-enable t
      ;; lsp-ui-sideline
      lsp-ui-sideline-enable t
      lsp-ui-sideline-ignore-duplicate t
      lsp-ui-sideline-show-symbol t
      lsp-ui-sideline-show-hover t
      lsp-ui-sideline-show-diagnostics t
      lsp-ui-sideline-show-code-actions t
      )

(setq lsp-diagnostics-provider :none
      lsp-modeline-diagnostics-enable nil
      lsp-signature-auto-activate nil ;; you could manually request them via `lsp-signature-activate`
      lsp-signature-render-documentation nil)
#+end_src

#+RESULTS:

** Imports

#+begin_src jupyter-python
%matplotlib inline
%load_ext autoreload
%autoreload 2

from cycler import cycler
import warnings
warnings.filterwarnings("ignore")

import pickle

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import GridSearchCV
from sklearn.neural_network import MLPRegressor
from sklearn.metrics import mean_squared_error, r2_score

from itertools import product
#+end_src

#+RESULTS:
:results:
# Out[24]:
:end:

** Functions

#+begin_src jupyter-python
# Display all
def display_all(df):
    with pd.option_context("display.max_rows", 100, "display.max_columns", 100): 
        display(df)
#+end_src

#+RESULTS:
:results:
# Out[25]:
:end:

** Org                                                            :noexport:

#+begin_src jupyter-python
# Org-mode table formatter
import IPython
import tabulate

class OrgFormatter(IPython.core.formatters.BaseFormatter):
    format_type = IPython.core.formatters.Unicode('text/org')
    print_method = IPython.core.formatters.ObjectName('_repr_org_')

def pd_dataframe_to_org(df):
    return tabulate.tabulate(df, headers='keys', tablefmt='orgtbl', showindex='always')

ip = get_ipython()
ip.display_formatter.formatters['text/org'] = OrgFormatter()

f = ip.display_formatter.formatters['text/org']
f.for_type_by_name('pandas.core.frame', 'DataFrame', pd_dataframe_to_org)
#+end_src

#+RESULTS:
:results:
# Out[26]:
:end:

** Matplotlib setup
#+begin_src jupyter-python
import matplotlib.font_manager
[f.name for f in matplotlib.font_manager.fontManager.ttflist]
plt.rcParams['font.family'] = 'Fira Mono'
   
#Financier Style
ft_background = "#FFF1E5"
ft_democratblue = "#0F56B5"
ft_republicanred = "#EF4647"
ft_pink = "#E95D8C"
ft_darkred = "#7D062E"
ft_darkblue = "#065296"
ft_blue = "#2591CE"
ft_lightblue = "#72D9E7"
ft_greenish = "#A2BC5D"
ft_maybegrey = "#716962"
ft_golden = "#B89E17"

tinyfont = 14
smallfont = 20
largefont = 28
linewidth = 5

plt.rcParams['figure.facecolor'] = ft_background
plt.rcParams['axes.facecolor']= ft_background
plt.rcParams['text.color']= ft_maybegrey
plt.rcParams['xtick.color']= ft_maybegrey
plt.rcParams['ytick.color']= ft_maybegrey
plt.rcParams['axes.labelcolor']= ft_maybegrey

plt.rcParams["axes.grid.axis"] ="y"
plt.rcParams["axes.grid"] = True
plt.rcParams['axes.spines.left'] = False
plt.rcParams['axes.spines.right'] = False
plt.rcParams['axes.spines.top'] = False
plt.rcParams['axes.spines.bottom'] = True
plt.rcParams['figure.figsize'] = (5, 5)

plt.rcParams['axes.titlesize'] = largefont
plt.rcParams['font.size'] = smallfont
plt.rcParams['xtick.labelsize'] = tinyfont
plt.rcParams['ytick.labelsize'] = tinyfont
plt.rcParams['axes.labelsize']  = smallfont    
plt.rcParams['xtick.major.size'] = 10
plt.rcParams['xtick.major.pad'] = 10
plt.rcParams['ytick.major.size'] = 0
plt.rcParams['ytick.major.pad'] = 10


plt.rcParams['lines.linewidth'] = linewidth
plt.rc('axes', prop_cycle=(cycler('color', [ft_darkblue, ft_blue, ft_lightblue, ft_pink, ft_darkred, ft_greenish])))
#+end_src

#+RESULTS:
:results:
# Out[27]:
:end:

* Data Loading
** Load Data

#+begin_src jupyter-python
train = pd.read_csv('data/train.csv')
#+end_src

#+RESULTS:
:results:
# Out[28]:
:end:

#+begin_src jupyter-python
X = train.drop('MEDV', axis=1)
y = train['MEDV']
#+end_src

#+RESULTS:
:results:
# Out[29]:
:end:

* Training

#+begin_src jupyter-python
n_neurons = np.concatenate([np.arange(2,10), np.arange(10,30,2)])
hls = list(product(n_neurons, repeat=1))
#for n in range(len(n_neurons)):
#    hls[n] = (6,) + hls[n]
#    hls[n] = (6,8,) + hls[n]
#    hls[n] = (6,8,30,) + hls[n]
hls
#+end_src

#+RESULTS:
:results:
# Out[30]:
#+BEGIN_EXAMPLE
  [(2,),
  (3,),
  (4,),
  (5,),
  (6,),
  (7,),
  (8,),
  (9,),
  (10,),
  (12,),
  (14,),
  (16,),
  (18,),
  (20,),
  (22,),
  (24,),
  (26,),
  (28,)]
#+END_EXAMPLE
:end:

#+begin_src jupyter-python
model = MLPRegressor(solver='lbfgs',
                     alpha=0.0001,
                     max_iter=10000,
                     random_state=0,
                     max_fun=15000,
                     verbose=False)

param_grid = {
    'hidden_layer_sizes': hls,
    'activation': ['relu']
}

greg = GridSearchCV(estimator=model, param_grid=param_grid, n_jobs=6, cv=3)
greg.fit(X, y)
#+end_src

#+RESULTS:
:results:
# Out[31]:
#+BEGIN_EXAMPLE
  GridSearchCV(cv=3,
  estimator=MLPRegressor(max_iter=10000, random_state=0,
  solver='lbfgs'),
  n_jobs=6,
  param_grid={'activation': ['relu'],
  'hidden_layer_sizes': [(2,), (3,), (4,), (5,), (6,),
  (7,), (8,), (9,), (10,), (12,),
  (14,), (16,), (18,), (20,),
  (22,), (24,), (26,), (28,)]})
#+END_EXAMPLE
:end:

#+begin_src jupyter-python
results = pd.DataFrame(greg.cv_results_)
results
#+end_src

#+RESULTS:
:results:
# Out[32]:
|    |   mean_fit_time |   std_fit_time |   mean_score_time |   std_score_time | param_activation   | param_hidden_layer_sizes   | params                                              |   split0_test_score |   split1_test_score |   split2_test_score |   mean_test_score |   std_test_score |   rank_test_score |
|----+-----------------+----------------+-------------------+------------------+--------------------+----------------------------+-----------------------------------------------------+---------------------+---------------------+---------------------+-------------------+------------------+-------------------|
|  0 |       0.0266236 |      0.0029239 |       0.000861327 |      8.25912e-05 | relu               | (2,)                       | {'activation': 'relu', 'hidden_layer_sizes': (2,)}  |            0.799828 |            0.786654 |           0.800392  |          0.795625 |       0.00634746 |                 8 |
|  1 |       0.0511596 |      0.0214259 |       0.000768979 |      4.5997e-05  | relu               | (3,)                       | {'activation': 'relu', 'hidden_layer_sizes': (3,)}  |            0.808576 |            0.807939 |           0.830091  |          0.815536 |       0.0102958  |                 5 |
|  2 |       0.0950147 |      0.0628841 |       0.000684023 |      5.05012e-06 | relu               | (4,)                       | {'activation': 'relu', 'hidden_layer_sizes': (4,)}  |            0.868221 |            0.858926 |           0.784575  |          0.837241 |       0.0374333  |                 2 |
|  3 |       0.116851  |      0.0244357 |       0.000676394 |      1.15938e-05 | relu               | (5,)                       | {'activation': 'relu', 'hidden_layer_sizes': (5,)}  |            0.840041 |            0.815708 |           0.818624  |          0.824791 |       0.010849   |                 3 |
|  4 |       0.150284  |      0.0336995 |       0.000670989 |      5.21017e-06 | relu               | (6,)                       | {'activation': 'relu', 'hidden_layer_sizes': (6,)}  |            0.837083 |            0.83605  |           0.852443  |          0.841859 |       0.00749627 |                 1 |
|  5 |       0.253247  |      0.104419  |       0.000697374 |      1.62487e-05 | relu               | (7,)                       | {'activation': 'relu', 'hidden_layer_sizes': (7,)}  |            0.84874  |            0.768861 |           0.816847  |          0.811483 |       0.0328305  |                 6 |
|  6 |       0.22333   |      0.0926959 |       0.00104491  |      0.000519679 | relu               | (8,)                       | {'activation': 'relu', 'hidden_layer_sizes': (8,)}  |            0.865375 |            0.749041 |           0.840419  |          0.818278 |       0.0500073  |                 4 |
|  7 |       0.221505  |      0.0486664 |       0.00068291  |      1.06878e-05 | relu               | (9,)                       | {'activation': 'relu', 'hidden_layer_sizes': (9,)}  |            0.821929 |            0.774    |           0.798388  |          0.798105 |       0.0195679  |                 7 |
|  8 |       0.308176  |      0.167071  |       0.000685612 |      9.66568e-06 | relu               | (10,)                      | {'activation': 'relu', 'hidden_layer_sizes': (10,)} |            0.813162 |            0.669149 |           0.852311  |          0.778207 |       0.0787546  |                10 |
|  9 |       0.514959  |      0.081837  |       0.000687679 |      4.20381e-06 | relu               | (12,)                      | {'activation': 'relu', 'hidden_layer_sizes': (12,)} |            0.759588 |            0.780152 |           0.784167  |          0.774636 |       0.0107656  |                11 |
| 10 |       0.415169  |      0.0630071 |       0.000984271 |      0.000388844 | relu               | (14,)                      | {'activation': 'relu', 'hidden_layer_sizes': (14,)} |            0.811708 |            0.684372 |           0.863476  |          0.786519 |       0.0752569  |                 9 |
| 11 |       0.524459  |      0.104221  |       0.00108314  |      0.000557196 | relu               | (16,)                      | {'activation': 'relu', 'hidden_layer_sizes': (16,)} |            0.797049 |            0.700024 |           0.816564  |          0.771212 |       0.0509641  |                12 |
| 12 |       1.10106   |      0.481608  |       0.000706991 |      8.82757e-06 | relu               | (18,)                      | {'activation': 'relu', 'hidden_layer_sizes': (18,)} |            0.617392 |            0.782971 |           0.756976  |          0.719113 |       0.0727063  |                14 |
| 13 |       0.852047  |      0.402113  |       0.00107876  |      0.00054551  | relu               | (20,)                      | {'activation': 'relu', 'hidden_layer_sizes': (20,)} |            0.623578 |            0.664652 |           0.812985  |          0.700405 |       0.081353   |                15 |
| 14 |       0.921188  |      0.279281  |       0.000712077 |      3.05532e-06 | relu               | (22,)                      | {'activation': 'relu', 'hidden_layer_sizes': (22,)} |            0.748777 |            0.677411 |           0.73205   |          0.719413 |       0.0304748  |                13 |
| 15 |       1.3877    |      0.19163   |       0.000712633 |      5.73528e-06 | relu               | (24,)                      | {'activation': 'relu', 'hidden_layer_sizes': (24,)} |            0.806941 |            0.26862  |           0.746683  |          0.607415 |       0.240824   |                16 |
| 16 |       1.67497   |      0.32419   |       0.00165113  |      0.0013286   | relu               | (26,)                      | {'activation': 'relu', 'hidden_layer_sizes': (26,)} |            0.324999 |            0.510764 |          -0.0629865 |          0.257592 |       0.239033   |                18 |
| 17 |       1.56296   |      0.278587  |       0.000725826 |      2.12039e-05 | relu               | (28,)                      | {'activation': 'relu', 'hidden_layer_sizes': (28,)} |            0.186414 |            0.579578 |           0.582837  |          0.44961  |       0.186112   |                17 |
:end:


#+begin_src jupyter-python
sns.lineplot(x=results.index, y=results.mean_test_score)
plt.show()
#+end_src

#+RESULTS:
:results:
# Out[33]:
[[file:./obipy-resources/ctCIja.png]]
:end:

* Evaluation

#+begin_src jupyter-python
y_predict = greg.best_estimator_.predict(X)
rmse = (np.sqrt(mean_squared_error(y, y_predict)))
r2 = r2_score(y, y_predict)

print("The model performance for training set")
print("--------------------------------------")
print('RMSE is {}'.format(rmse))
print('R2 score is {}'.format(r2))
print("\n")
#+end_src

#+RESULTS:
:results:
# Out[34]:
:end:

* Save best model

#+begin_src jupyter-python
with open('data/model.pkl', 'wb') as file:
    pickle.dump(greg.best_estimator_, file)
#+end_src

#+RESULTS:
:results:
# Out[35]:
:end:

* Bibliography
** References
:PROPERTIES:
:BEAMER_opt: shrink=10
:END:

bibliographystyle:unsrt
bibliography:perceptrons.bib

* Local Variables                                                  :noexport:
# Local Variables:
# eval: (setenv "PATH" "/Library/TeX/texbin/:$PATH" t)
# org-ref-default-bibliography: ("./olist.bib")
# End:
