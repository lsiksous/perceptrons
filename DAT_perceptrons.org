ðŸ’ˆ Introduction aux rÃ©seaux de neurones artificiels
#+PROPERTY: header-args:jupyter-python :session *Py* :results raw drawer :cache no :async no :exports results :eval yes

#+SUBTITLE: PrÃ©paration des donnÃ©es
#+AUTHOR: Laurent Siksous
#+EMAIL: siksous@gmail.com
# #+DATE: 
#+DESCRIPTION: 
#+KEYWORDS: 
#+LANGUAGE:  fr

# specifying the beamer startup gives access to a number of
# keybindings which make configuring individual slides and components
# of slides easier.  See, for instance, C-c C-b on a frame headline.
#+STARTUP: beamer

#+STARTUP: oddeven

# we tell the exporter to use a specific LaTeX document class, as
# defined in org-latex-classes.  By default, this does not include a
# beamer entry so this needs to be defined in your configuration (see
# the tutorial).
#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [bigger] 

#+LATEX_HEADER: \usepackage{listings}

#+LATEX_HEADER: \definecolor{UBCblue}{rgb}{0.04706, 0.13725, 0.26667} % UBC Blue (primary)
#+LATEX_HEADER: \usecolortheme[named=UBCblue]{structure}

# Beamer supports alternate themes.  Choose your favourite here
#+BEAMER_COLOR_THEME: dolphin
#+BEAMER_FONT_THEME:  default
#+BEAMER_INNER_THEME: [shadow]rounded
#+BEAMER_OUTER_THEME: infolines

# the beamer exporter expects to be told which level of headlines
# defines the frames.  We use the first level headlines for sections
# and the second (hence H:2) for frames.
#+OPTIONS:   H:2 toc:t

# the following allow us to selectively choose headlines to export or not
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport

# for a column view of options and configurations for the individual
# frames
#+COLUMNS: %20ITEM %13BEAMER_env(Env) %6BEAMER_envargs(Args) %4BEAMER_col(Col) %7BEAMER_extra(Extra)

# #+BEAMER_HEADER: \usebackgroundtemplate{\includegraphics[width=\paperwidth,height=\paperheight,opacity=.01]{img/bg2.jpeg}}
# #+BEAMER_HEADER: \logo{\includegraphics[height=.5cm,keepaspectratio]{img/bti_logo2.png}\vspace{240pt}}
# #+BEAMER_HEADER: \setbeamertemplate{background canvas}{\begin{tikzpicture}\node[opacity=.1]{\includegraphics [width=\paperwidth,height=\paperheight]{img/background.jpg}};\end{tikzpicture}}
# #+BEAMER_HEADER: \logo{\includegraphics[width=\paperwidth,height=\paperheight,keepaspectratio]{img/background.jpg}}
#+BEAMER_HEADER: \titlegraphic{\includegraphics[width=50]{img/logo.png}}
# #+BEAMER_HEADER: \definecolor{ft}{RGB}{255, 241, 229}
#+BEAMER_HEADER: \setbeamercolor{background canvas}{bg=ft}

* Preamble
** Emacs Setup                                                    :noexport:

#+begin_src emacs-lisp
(setq org-src-fontify-natively t)

(setq lsp-semantic-tokens-enable t)
(setq lsp-enable-symbol-highlighting t)

(setq lsp-enable-file-watchers nil
      read-process-output-max (* 1024 1024)
      gc-cons-threshold 100000000
      lsp-idle-delay 0.5
      ;;
      lsp-eldoc-hook nil
      lsp-eldoc-enable-hover nil

      ;;pas de fil d'ariane
      lsp-headerline-breadcrumb-enable nil
      ;; pas de imenu voir menu-list
      lsp-enable-imenu nil
      ;; lentille
      lsp-lens-enable t
 
      lsp-semantic-highlighting t
      lsp-modeline-code-actions-enable t
      )
  
(setq lsp-completion-provider :company
      lsp-completion-show-detail t
      lsp-completion-show-kind t)

(setq lsp-ui-doc-enable t
      lsp-ui-doc-show-with-mouse nil
      lsp-ui-doc-show-with-cursor t
      lsp-ui-doc-use-childframe t
      
      lsp-ui-sideline-diagnostic-max-line-length 80

      ;; lsp-ui-imenu
      lsp-ui-imenu-enable nil
      ;; lsp-ui-peek
      lsp-ui-peek-enable t
      ;; lsp-ui-sideline
      lsp-ui-sideline-enable t
      lsp-ui-sideline-ignore-duplicate t
      lsp-ui-sideline-show-symbol t
      lsp-ui-sideline-show-hover t
      lsp-ui-sideline-show-diagnostics t
      lsp-ui-sideline-show-code-actions t
      )

(setq lsp-diagnostics-provider :none
      lsp-modeline-diagnostics-enable nil
      lsp-signature-auto-activate nil ;; you could manually request them via `lsp-signature-activate`
      lsp-signature-render-documentation nil)
#+end_src

#+RESULTS:

** Imports

#+begin_src jupyter-python
%matplotlib inline
%load_ext autoreload
%autoreload 2

import warnings
warnings.filterwarnings("ignore")
import pickle

import numpy as np
import matplotlib.pyplot as plt
#import seaborn as sns

import tensorflow as tf
from tensorflow.keras.datasets import imdb

from sklearn.preprocessing import LabelEncoder, OneHotEncoder, MultiLabelBinarizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

tf.__version__
tf.config.list_physical_devices()
#+end_src

#+RESULTS:
:results:
0 - 411c17a0-43b3-4e24-a05b-9b346e370192
:end:


#+begin_src jupyter-python

#+end_src

** Functions

#+begin_src jupyter-python
# Display all
def display_all(df):
    with pd.option_context("display.max_rows", 100, "display.max_columns", 100): 
        display(df)
#+end_src

#+RESULTS:
:results:
# Out[18]:
:end:

** Org                                                            :noexport:

#+begin_src jupyter-python
# Org-mode table formatter
import IPython
import tabulate

class OrgFormatter(IPython.core.formatters.BaseFormatter):
    format_type = IPython.core.formatters.Unicode('text/org')
    print_method = IPython.core.formatters.ObjectName('_repr_org_')

def pd_dataframe_to_org(df):
    return tabulate.tabulate(df, headers='keys', tablefmt='orgtbl', showindex='always')

ip = get_ipython()
ip.display_formatter.formatters['text/org'] = OrgFormatter()

f = ip.display_formatter.formatters['text/org']
f.for_type_by_name('pandas.core.frame', 'DataFrame', pd_dataframe_to_org)
#+end_src

#+RESULTS:
:results:
# Out[19]:
:end:

* Data Prep
** Load Data

#+begin_src jupyter-python
(X_train, y_train), (X_test, y_test) = imdb.load_data(num_words=10000)
print(len(X_train), 'train sequences')
print(len(X_test), 'test sequences')
#+end_src

#+RESULTS:
:results:
# Out[20]:
:end:

** Glimpse at the data

#+begin_src jupyter-python
X_train[1:10]
y_train
word_index = imdb.get_word_index()
word_index['the']
#+end_src

#+RESULTS:
:results:
# Out[38]:
: 9
:end:

** Preprocessing

#+begin_src jupyter-python :eval no
#n = len(max(X_train, key=len))
#[x + [0]*(n-len(x)) for x in X_train]

X_zeros = np.zeros([len(X_train),len(max(X_train, key = lambda x: len(x)))], np.int8)
for i,j in enumerate(X_train):
    X_zeros[i][0:len(j)] = j
X_zeros.shape
#+end_src


#+begin_src jupyter-python
mlb = MultiLabelBinarizer()
X_train_oh = mlb.fit_transform(X_train)
X_test_oh = mlb.transform(X_test)
#+end_src

#+RESULTS:
:results:
# Out[22]:
:end:

** Training

#+begin_src jupyter-python :eval no
model = tf.estimator.LinearClassifier(feature_columns=[], n_classes=2)

def input_fn_train():
  return tf.data.Dataset.from_tensor_slices((X_train_oh, y_train))

def input_fn_eval():
  return tf.data.Dataset.from_tensor_slices((X_test_oh, y_test))

def input_fn_predict():
  # Returns tf.data.Dataset of (x, None) tuple.
  pass

model.train(input_fn=input_fn_train)
model.eval(input_fn=input_fn_eval)
#+end_src


#+begin_src jupyter-python :results output
for c in [0.01, 0.05, 0.25]:
    lr = LogisticRegression(C=c)
    lr.fit(X_train_oh, y_train)
    print(f"Train accuracy for C={c}: {accuracy_score(y_train, lr.predict(X_train_oh))}")
    print("Test accuracy for C=%s: %s"
           % (c, accuracy_score(y_test, lr.predict(X_test_oh))))
#+end_src

#+RESULTS:
:results:
Accuracy for C=0.01: 0.88012
Accuracy for C=0.05: 0.88344
Accuracy for C=0.25: 0.87612
:end:

* Bibliography
** References
:PROPERTIES:
:BEAMER_opt: shrink=10
:END:

bibliographystyle:unsrt
bibliography:perceptrons.bib

* Local Variables                                                  :noexport:
# Local Variables:
# eval: (setenv "PATH" "/Library/TeX/texbin/:$PATH" t)
# org-ref-default-bibliography: ("./olist.bib")
# End:
