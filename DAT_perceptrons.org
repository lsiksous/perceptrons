ðŸ’ˆ Introduction aux rÃ©seaux de neurones artificiels
#+PROPERTY: header-args:jupyter-python :session *Py* :results raw drawer :cache no :async yes :exports results :eval yes

#+SUBTITLE: PrÃ©paration des donnÃ©es
#+AUTHOR: Laurent Siksous
#+EMAIL: siksous@gmail.com
# #+DATE: 
#+DESCRIPTION: 
#+KEYWORDS: 
#+LANGUAGE:  fr

# specifying the beamer startup gives access to a number of
# keybindings which make configuring individual slides and components
# of slides easier.  See, for instance, C-c C-b on a frame headline.
#+STARTUP: beamer

#+STARTUP: oddeven

# we tell the exporter to use a specific LaTeX document class, as
# defined in org-latex-classes.  By default, this does not include a
# beamer entry so this needs to be defined in your configuration (see
# the tutorial).
#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [bigger] 

#+LATEX_HEADER: \usepackage{listings}

#+LATEX_HEADER: \definecolor{UBCblue}{rgb}{0.04706, 0.13725, 0.26667} % UBC Blue (primary)
#+LATEX_HEADER: \usecolortheme[named=UBCblue]{structure}

# Beamer supports alternate themes.  Choose your favourite here
#+BEAMER_COLOR_THEME: dolphin
#+BEAMER_FONT_THEME:  default
#+BEAMER_INNER_THEME: [shadow]rounded
#+BEAMER_OUTER_THEME: infolines

# the beamer exporter expects to be told which level of headlines
# defines the frames.  We use the first level headlines for sections
# and the second (hence H:2) for frames.
#+OPTIONS: ^:nil  H:2 toc:t

# the following allow us to selectively choose headlines to export or not
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport

# for a column view of options and configurations for the individual
# frames
#+COLUMNS: %20ITEM %13BEAMER_env(Env) %6BEAMER_envargs(Args) %4BEAMER_col(Col) %7BEAMER_extra(Extra)

# #+BEAMER_HEADER: \usebackgroundtemplate{\includegraphics[width=\paperwidth,height=\paperheight,opacity=.01]{img/bg2.jpeg}}
# #+BEAMER_HEADER: \logo{\includegraphics[height=.5cm,keepaspectratio]{img/bti_logo2.png}\vspace{240pt}}
# #+BEAMER_HEADER: \setbeamertemplate{background canvas}{\begin{tikzpicture}\node[opacity=.1]{\includegraphics [width=\paperwidth,height=\paperheight]{img/background.jpg}};\end{tikzpicture}}
# #+BEAMER_HEADER: \logo{\includegraphics[width=\paperwidth,height=\paperheight,keepaspectratio]{img/background.jpg}}
#+BEAMER_HEADER: \titlegraphic{\includegraphics[width=50]{img/logo.png}}
# #+BEAMER_HEADER: \definecolor{ft}{RGB}{255, 241, 229}
#+BEAMER_HEADER: \setbeamercolor{background canvas}{bg=ft}

* Preamble
** Emacs Setup                                                    :noexport:

#+begin_src emacs-lisp
(setq org-src-fontify-natively t)

(setq lsp-semantic-tokens-enable t)
(setq lsp-enable-symbol-highlighting t)

(setq lsp-enable-file-watchers nil
      read-process-output-max (* 1024 1024)
      gc-cons-threshold 100000000
      lsp-idle-delay 0.5
      ;;
      lsp-eldoc-hook nil
      lsp-eldoc-enable-hover nil

      ;;pas de fil d'ariane
      lsp-headerline-breadcrumb-enable nil
      ;; pas de imenu voir menu-list
      lsp-enable-imenu nil
      ;; lentille
      lsp-lens-enable t
 
      lsp-semantic-highlighting t
      lsp-modeline-code-actions-enable t
      )
  
(setq lsp-completion-provider :company
      lsp-completion-show-detail t
      lsp-completion-show-kind t)

(setq lsp-ui-doc-enable t
      lsp-ui-doc-show-with-mouse nil
      lsp-ui-doc-show-with-cursor t
      lsp-ui-doc-use-childframe t
      
      lsp-ui-sideline-diagnostic-max-line-length 80

      ;; lsp-ui-imenu
      lsp-ui-imenu-enable nil
      ;; lsp-ui-peek
      lsp-ui-peek-enable t
      ;; lsp-ui-sideline
      lsp-ui-sideline-enable t
      lsp-ui-sideline-ignore-duplicate t
      lsp-ui-sideline-show-symbol t
      lsp-ui-sideline-show-hover t
      lsp-ui-sideline-show-diagnostics t
      lsp-ui-sideline-show-code-actions t
      )

(setq lsp-diagnostics-provider :none
      lsp-modeline-diagnostics-enable nil
      lsp-signature-auto-activate nil ;; you could manually request them via `lsp-signature-activate`
      lsp-signature-render-documentation nil)
#+end_src

#+RESULTS:

** Imports

#+begin_src jupyter-python
%matplotlib inline
%load_ext autoreload
%autoreload 2

import warnings
warnings.filterwarnings("ignore")
import pickle

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.datasets import load_boston
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error, r2_score
#+end_src

#+RESULTS:
:results:
# Out[65]:
:end:

** Functions

#+begin_src jupyter-python
# Display all
def display_all(df):
    with pd.option_context("display.max_rows", 100, "display.max_columns", 100): 
        display(df)
#+end_src

#+RESULTS:
:results:
# Out[66]:
:end:

** Org                                                            :noexport:

#+begin_src jupyter-python
# Org-mode table formatter
import IPython
import tabulate

class OrgFormatter(IPython.core.formatters.BaseFormatter):
    format_type = IPython.core.formatters.Unicode('text/org')
    print_method = IPython.core.formatters.ObjectName('_repr_org_')

def pd_dataframe_to_org(df):
    return tabulate.tabulate(df, headers='keys', tablefmt='orgtbl', showindex='always')

ip = get_ipython()
ip.display_formatter.formatters['text/org'] = OrgFormatter()

f = ip.display_formatter.formatters['text/org']
f.for_type_by_name('pandas.core.frame', 'DataFrame', pd_dataframe_to_org)
#+end_src

#+RESULTS:
:results:
# Out[67]:
:end:

** Seaborn

#+begin_src jupyter-python
sns.set(rc={'figure.figsize':(11.7,8.27)})
#+end_src

#+RESULTS:
:results:
# Out[68]:
:end:

* Data Wrangling
** Load Data

#+begin_src jupyter-python
df_raw = load_boston()
df_raw.data.shape, df_raw.target.shape
#+end_src

#+RESULTS:
:results:
# Out[69]:
: ((506, 13), (506,))
:end:

** Glimpse at the data

#+begin_src jupyter-python
print(df_raw.DESCR)
#+end_src

#+RESULTS:
:results:
# Out[70]:
:end:

CRIM: Per capita crime rate by town
ZN: Proportion of residential land zoned for lots over 25,000 sq. ft
INDUS: Proportion of non-retail business acres per town
CHAS: Charles River dummy variable (= 1 if tract bounds river; 0 otherwise)
NOX: Nitric oxide concentration (parts per 10 million)
RM: Average number of rooms per dwelling
AGE: Proportion of owner-occupied units built prior to 1940
DIS: Weighted distances to five Boston employment centers
RAD: Index of accessibility to radial highways
TAX: Full-value property tax rate per $10,000
PTRATIO: Pupil-teacher ratio by town
B: 1000(Bk â€” 0.63)Â², where Bk is the proportion of [people of African American descent] by town
LSTAT: Percentage of lower status of the population
MEDV: Median value of owner-occupied homes in $1000s

#+begin_src jupyter-python
df = pd.DataFrame(df_raw.data, columns=df_raw.feature_names)
display_all(df.describe(include='all').T)
#+end_src

#+RESULTS:
:results:
# Out[71]:
|         |   count |       mean |        std |       min |        25% |       50% |       75% |      max |
|---------+---------+------------+------------+-----------+------------+-----------+-----------+----------|
| CRIM    |     506 |   3.61352  |   8.60155  |   0.00632 |   0.082045 |   0.25651 |   3.67708 |  88.9762 |
| ZN      |     506 |  11.3636   |  23.3225   |   0       |   0        |   0       |  12.5     | 100      |
| INDUS   |     506 |  11.1368   |   6.86035  |   0.46    |   5.19     |   9.69    |  18.1     |  27.74   |
| CHAS    |     506 |   0.06917  |   0.253994 |   0       |   0        |   0       |   0       |   1      |
| NOX     |     506 |   0.554695 |   0.115878 |   0.385   |   0.449    |   0.538   |   0.624   |   0.871  |
| RM      |     506 |   6.28463  |   0.702617 |   3.561   |   5.8855   |   6.2085  |   6.6235  |   8.78   |
| AGE     |     506 |  68.5749   |  28.1489   |   2.9     |  45.025    |  77.5     |  94.075   | 100      |
| DIS     |     506 |   3.79504  |   2.10571  |   1.1296  |   2.10018  |   3.20745 |   5.18843 |  12.1265 |
| RAD     |     506 |   9.54941  |   8.70726  |   1       |   4        |   5       |  24       |  24      |
| TAX     |     506 | 408.237    | 168.537    | 187       | 279        | 330       | 666       | 711      |
| PTRATIO |     506 |  18.4555   |   2.16495  |  12.6     |  17.4      |  19.05    |  20.2     |  22      |
| B       |     506 | 356.674    |  91.2949   |   0.32    | 375.377    | 391.44    | 396.225   | 396.9    |
| LSTAT   |     506 |  12.6531   |   7.14106  |   1.73    |   6.95     |  11.36    |  16.955   |  37.97   |
:end:


#+begin_src jupyter-python
X, y = load_boston(return_X_y=True)
#+end_src

#+RESULTS:
:results:
# Out[72]:
:end:

#+begin_src jupyter-python
sns.distplot(y, bins=30)
plt.show()
#+end_src

#+RESULTS:
:results:
# Out[73]:
[[file:./obipy-resources/vjM4Oa.png]]
:end:


#+begin_src jupyter-python
df['MEDV'] = df_raw.target
correlation_matrix = df.corr().round(2)
sns.heatmap(data=correlation_matrix, annot=True)
#+end_src

#+RESULTS:
:results:
# Out[74]:
: <AxesSubplot:>
[[file:./obipy-resources/Xnh1j3.png]]
:end:

** Split the data

#+begin_src jupyter-python
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.1, random_state=42)
print(X_train.shape)
print(X_test.shape)
print(y_train.shape)
print(y_test.shape)
#+end_src

#+RESULTS:
:results:
# Out[75]:
:end:

** Feature Scaling

#+begin_src jupyter-python
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)
#+end_src

#+RESULTS:
:results:
# Out[76]:
:end:

* Baseline

#+begin_src jupyter-python
model = LinearRegression()
model.fit(X_train, y_train)
#+end_src

#+RESULTS:
:results:
# Out[77]:
: LinearRegression()
:end:


#+begin_src jupyter-python :results output
y_train_predict = model.predict(X_train)
rmse = (np.sqrt(mean_squared_error(y_train, y_train_predict)))
r2 = r2_score(y_train, y_train_predict)

print("The model performance for training set")
print("--------------------------------------")
print('RMSE is {}'.format(rmse))
print('R2 score is {}'.format(r2))
print("\n")

# model evaluation for testing set
y_test_predict = model.predict(X_test)
rmse = (np.sqrt(mean_squared_error(y_test, y_test_predict)))
r2 = r2_score(y_test, y_test_predict)

print("The model performance for testing set")
print("--------------------------------------")
print('RMSE is {}'.format(rmse))
print('R2 score is {}'.format(r2))
#+end_src

#+RESULTS:
:results:
The model performance for training set
--------------------------------------
RMSE is 4.768394924341586
R2 score is 0.7375152736886281


The model performance for testing set
--------------------------------------
RMSE is 3.872447917865731
R2 score is 0.7598135533532475
:end:

* Save the Data

#+begin_src jupyter-python
train = pd.DataFrame(np.c_[X_train, y_train], columns=df.columns)
test = pd.DataFrame(np.c_[X_test, y_test], columns=df.columns)
train.to_csv('data/train.csv', index=False)
test.to_csv('data/test.csv', index=False)
#+end_src

#+RESULTS:
:results:
# Out[79]:
:end:

* Bibliography
** References
:PROPERTIES:
:BEAMER_opt: shrink=10
:END:

bibliographystyle:unsrt
bibliography:perceptrons.bib

* Local Variables                                                  :noexport:
# Local Variables:
# eval: (setenv "PATH" "/Library/TeX/texbin/:$PATH" t)
# org-ref-default-bibliography: ("./olist.bib")
# End:
